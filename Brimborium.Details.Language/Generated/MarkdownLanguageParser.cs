//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MarkdownLanguage.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MarkdownLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, CommandName=2, Letters=3, Minus=4, FileName=5, Slash=6, SlashSlash=7, 
		DirectorySeperator=8, MarkdownExtension=9, CSharpExtension=10, HTMLExtension=11, 
		Hash=12, Paragraph=13, NotParagraph=14, ParagraphGreater=15, NewLine=16, 
		WhiteSpace=17;
	public const int
		RULE_markdownLanguage = 0, RULE_markdownLine = 1, RULE_mdAnchor = 2, RULE_mdReference = 3, 
		RULE_mdCommand = 4, RULE_paragraphAnchor = 5, RULE_paragraphReference = 6, 
		RULE_paragraphCommand = 7, RULE_anchor = 8, RULE_reference = 9, RULE_contentPath = 10, 
		RULE_filePath = 11;
	public static readonly string[] ruleNames = {
		"markdownLanguage", "markdownLine", "mdAnchor", "mdReference", "mdCommand", 
		"paragraphAnchor", "paragraphReference", "paragraphCommand", "anchor", 
		"reference", "contentPath", "filePath"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'-'", null, "'/'", "'//'", null, "'.md'", "'.cs'", 
		"'.html'", null, null, null, "'\\u00A7>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "CommandName", "Letters", "Minus", "FileName", "Slash", "SlashSlash", 
		"DirectorySeperator", "MarkdownExtension", "CSharpExtension", "HTMLExtension", 
		"Hash", "Paragraph", "NotParagraph", "ParagraphGreater", "NewLine", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MarkdownLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MarkdownLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MarkdownLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MarkdownLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MarkdownLanguageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MarkdownLanguageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MarkdownLineContext[] markdownLine() {
			return GetRuleContexts<MarkdownLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MarkdownLineContext markdownLine(int i) {
			return GetRuleContext<MarkdownLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(MarkdownLanguageParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(MarkdownLanguageParser.NewLine, i);
		}
		public MarkdownLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markdownLanguage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterMarkdownLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitMarkdownLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkdownLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkdownLanguageContext markdownLanguage() {
		MarkdownLanguageContext _localctx = new MarkdownLanguageContext(Context, State);
		EnterRule(_localctx, 0, RULE_markdownLanguage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 24;
					markdownLine();
					State = 25;
					Match(NewLine);
					}
					} 
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph || _la==ParagraphGreater) {
				{
				State = 32;
				markdownLine();
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NewLine) {
					{
					State = 33;
					Match(NewLine);
					}
				}

				}
			}

			State = 38;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkdownLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphAnchorContext paragraphAnchor() {
			return GetRuleContext<ParagraphAnchorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphReferenceContext paragraphReference() {
			return GetRuleContext<ParagraphReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphCommandContext paragraphCommand() {
			return GetRuleContext<ParagraphCommandContext>(0);
		}
		public MarkdownLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markdownLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterMarkdownLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitMarkdownLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkdownLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkdownLineContext markdownLine() {
		MarkdownLineContext _localctx = new MarkdownLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_markdownLine);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				paragraphAnchor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				paragraphReference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				paragraphCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MdAnchorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(MarkdownLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(MarkdownLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		public MdAnchorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mdAnchor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterMdAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitMdAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMdAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MdAnchorContext mdAnchor() {
		MdAnchorContext _localctx = new MdAnchorContext(Context, State);
		EnterRule(_localctx, 4, RULE_mdAnchor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(Paragraph);
			State = 46;
			anchor();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 47;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MdReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(MarkdownLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(MarkdownLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		public MdReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mdReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterMdReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitMdReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMdReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MdReferenceContext mdReference() {
		MdReferenceContext _localctx = new MdReferenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_mdReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(Paragraph);
			State = 51;
			anchor();
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 52;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MdCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParagraphGreater() { return GetToken(MarkdownLanguageParser.ParagraphGreater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommandName() { return GetToken(MarkdownLanguageParser.CommandName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph() { return GetToken(MarkdownLanguageParser.Paragraph, 0); }
		public MdCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mdCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterMdCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitMdCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMdCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MdCommandContext mdCommand() {
		MdCommandContext _localctx = new MdCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_mdCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(ParagraphGreater);
			State = 56;
			Match(CommandName);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Hash) {
				{
				State = 57;
				anchor();
				}
			}

			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 60;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphAnchorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(MarkdownLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(MarkdownLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		public ParagraphAnchorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphAnchor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphAnchorContext paragraphAnchor() {
		ParagraphAnchorContext _localctx = new ParagraphAnchorContext(Context, State);
		EnterRule(_localctx, 10, RULE_paragraphAnchor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(Paragraph);
			State = 64;
			anchor();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 65;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(MarkdownLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(MarkdownLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ParagraphReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphReferenceContext paragraphReference() {
		ParagraphReferenceContext _localctx = new ParagraphReferenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_paragraphReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(Paragraph);
			State = 69;
			reference();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 70;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParagraphGreater() { return GetToken(MarkdownLanguageParser.ParagraphGreater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommandName() { return GetToken(MarkdownLanguageParser.CommandName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph() { return GetToken(MarkdownLanguageParser.Paragraph, 0); }
		public ParagraphCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphCommandContext paragraphCommand() {
		ParagraphCommandContext _localctx = new ParagraphCommandContext(Context, State);
		EnterRule(_localctx, 14, RULE_paragraphCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(ParagraphGreater);
			State = 74;
			Match(CommandName);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Hash) {
				{
				State = 75;
				anchor();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 78;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnchorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentPathContext contentPath() {
			return GetRuleContext<ContentPathContext>(0);
		}
		public AnchorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anchor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnchorContext anchor() {
		AnchorContext _localctx = new AnchorContext(Context, State);
		EnterRule(_localctx, 16, RULE_anchor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			contentPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentPathContext contentPath() {
			return GetRuleContext<ContentPathContext>(0);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 18, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			filePath();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Hash) {
				{
				State = 84;
				contentPath();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(MarkdownLanguageParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FileName() { return GetTokens(MarkdownLanguageParser.FileName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileName(int i) {
			return GetToken(MarkdownLanguageParser.FileName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(MarkdownLanguageParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(MarkdownLanguageParser.Slash, i);
		}
		public ContentPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterContentPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitContentPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContentPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentPathContext contentPath() {
		ContentPathContext _localctx = new ContentPathContext(Context, State);
		EnterRule(_localctx, 20, RULE_contentPath);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(Hash);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Slash) {
				{
				State = 88;
				Match(Slash);
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 91;
					Match(FileName);
					State = 92;
					Match(Slash);
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 98;
			Match(FileName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FileName() { return GetTokens(MarkdownLanguageParser.FileName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileName(int i) {
			return GetToken(MarkdownLanguageParser.FileName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DirectorySeperator() { return GetTokens(MarkdownLanguageParser.DirectorySeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectorySeperator(int i) {
			return GetToken(MarkdownLanguageParser.DirectorySeperator, i);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.EnterFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMarkdownLanguageListener typedListener = listener as IMarkdownLanguageListener;
			if (typedListener != null) typedListener.ExitFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMarkdownLanguageVisitor<TResult> typedVisitor = visitor as IMarkdownLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilePathContext filePath() {
		FilePathContext _localctx = new FilePathContext(Context, State);
		EnterRule(_localctx, 22, RULE_filePath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 100;
					Match(FileName);
					State = 101;
					Match(DirectorySeperator);
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 107;
			Match(FileName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,110,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,5,0,28,8,0,10,0,12,
		0,31,9,0,1,0,1,0,3,0,35,8,0,3,0,37,8,0,1,0,1,0,1,1,1,1,1,1,3,1,44,8,1,
		1,2,1,2,1,2,3,2,49,8,2,1,3,1,3,1,3,3,3,54,8,3,1,4,1,4,1,4,3,4,59,8,4,1,
		4,3,4,62,8,4,1,5,1,5,1,5,3,5,67,8,5,1,6,1,6,1,6,3,6,72,8,6,1,7,1,7,1,7,
		3,7,77,8,7,1,7,3,7,80,8,7,1,8,1,8,1,9,1,9,3,9,86,8,9,1,10,1,10,3,10,90,
		8,10,1,10,1,10,5,10,94,8,10,10,10,12,10,97,9,10,1,10,1,10,1,11,1,11,5,
		11,103,8,11,10,11,12,11,106,9,11,1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,
		14,16,18,20,22,0,0,114,0,29,1,0,0,0,2,43,1,0,0,0,4,45,1,0,0,0,6,50,1,0,
		0,0,8,55,1,0,0,0,10,63,1,0,0,0,12,68,1,0,0,0,14,73,1,0,0,0,16,81,1,0,0,
		0,18,83,1,0,0,0,20,87,1,0,0,0,22,104,1,0,0,0,24,25,3,2,1,0,25,26,5,16,
		0,0,26,28,1,0,0,0,27,24,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,
		0,0,30,36,1,0,0,0,31,29,1,0,0,0,32,34,3,2,1,0,33,35,5,16,0,0,34,33,1,0,
		0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,32,1,0,0,0,36,37,1,0,0,0,37,38,1,0,
		0,0,38,39,5,0,0,1,39,1,1,0,0,0,40,44,3,10,5,0,41,44,3,12,6,0,42,44,3,14,
		7,0,43,40,1,0,0,0,43,41,1,0,0,0,43,42,1,0,0,0,44,3,1,0,0,0,45,46,5,13,
		0,0,46,48,3,16,8,0,47,49,5,13,0,0,48,47,1,0,0,0,48,49,1,0,0,0,49,5,1,0,
		0,0,50,51,5,13,0,0,51,53,3,16,8,0,52,54,5,13,0,0,53,52,1,0,0,0,53,54,1,
		0,0,0,54,7,1,0,0,0,55,56,5,15,0,0,56,58,5,2,0,0,57,59,3,16,8,0,58,57,1,
		0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,62,5,13,0,0,61,60,1,0,0,0,61,62,1,
		0,0,0,62,9,1,0,0,0,63,64,5,13,0,0,64,66,3,16,8,0,65,67,5,13,0,0,66,65,
		1,0,0,0,66,67,1,0,0,0,67,11,1,0,0,0,68,69,5,13,0,0,69,71,3,18,9,0,70,72,
		5,13,0,0,71,70,1,0,0,0,71,72,1,0,0,0,72,13,1,0,0,0,73,74,5,15,0,0,74,76,
		5,2,0,0,75,77,3,16,8,0,76,75,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,80,
		5,13,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,15,1,0,0,0,81,82,3,20,10,0,82,
		17,1,0,0,0,83,85,3,22,11,0,84,86,3,20,10,0,85,84,1,0,0,0,85,86,1,0,0,0,
		86,19,1,0,0,0,87,89,5,12,0,0,88,90,5,6,0,0,89,88,1,0,0,0,89,90,1,0,0,0,
		90,95,1,0,0,0,91,92,5,5,0,0,92,94,5,6,0,0,93,91,1,0,0,0,94,97,1,0,0,0,
		95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,99,5,5,0,0,
		99,21,1,0,0,0,100,101,5,5,0,0,101,103,5,8,0,0,102,100,1,0,0,0,103,106,
		1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,1,0,0,
		0,107,108,5,5,0,0,108,23,1,0,0,0,16,29,34,36,43,48,53,58,61,66,71,76,79,
		85,89,95,104
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
