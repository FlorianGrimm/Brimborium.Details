//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSharpLanguage.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class CSharpLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CommandName=1, Letters=2, Minus=3, FileName=4, Slash=5, SlashSlash=6, 
		DirectorySeperator=7, MarkdownExtension=8, CSharpExtension=9, HTMLExtension=10, 
		Hash=11, Paragraph=12, NotParagraph=13, ParagraphGreater=14, NewLine=15, 
		WhiteSpace=16;
	public const int
		RULE_csharpLanguage = 0, RULE_csharpContent = 1, RULE_csharpSingleLineComment = 2, 
		RULE_paragraphAnchor = 3, RULE_paragraphReference = 4, RULE_paragraphCommand = 5, 
		RULE_anchor = 6, RULE_reference = 7, RULE_contentPath = 8, RULE_filePath = 9;
	public static readonly string[] ruleNames = {
		"csharpLanguage", "csharpContent", "csharpSingleLineComment", "paragraphAnchor", 
		"paragraphReference", "paragraphCommand", "anchor", "reference", "contentPath", 
		"filePath"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'-'", null, "'/'", "'//'", null, "'.md'", "'.cs'", 
		"'.html'", null, null, null, "'\\u00A7>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CommandName", "Letters", "Minus", "FileName", "Slash", "SlashSlash", 
		"DirectorySeperator", "MarkdownExtension", "CSharpExtension", "HTMLExtension", 
		"Hash", "Paragraph", "NotParagraph", "ParagraphGreater", "NewLine", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSharpLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CsharpLanguageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CsharpSingleLineCommentContext[] csharpSingleLineComment() {
			return GetRuleContexts<CsharpSingleLineCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CsharpSingleLineCommentContext csharpSingleLineComment(int i) {
			return GetRuleContext<CsharpSingleLineCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(CSharpLanguageParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(CSharpLanguageParser.NewLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CSharpLanguageParser.Eof, 0); }
		public CsharpLanguageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharpLanguage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterCsharpLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitCsharpLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsharpLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsharpLanguageContext csharpLanguage() {
		CsharpLanguageContext _localctx = new CsharpLanguageContext(Context, State);
		EnterRule(_localctx, 0, RULE_csharpLanguage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 20;
					csharpSingleLineComment();
					State = 21;
					Match(NewLine);
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SlashSlash) {
				{
				State = 28;
				csharpSingleLineComment();
				State = 29;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==NewLine) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsharpContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CsharpSingleLineCommentContext csharpSingleLineComment() {
			return GetRuleContext<CsharpSingleLineCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine() { return GetToken(CSharpLanguageParser.NewLine, 0); }
		public CsharpContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharpContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterCsharpContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitCsharpContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsharpContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsharpContentContext csharpContent() {
		CsharpContentContext _localctx = new CsharpContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_csharpContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			csharpSingleLineComment();
			State = 34;
			Match(NewLine);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsharpSingleLineCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SlashSlash() { return GetToken(CSharpLanguageParser.SlashSlash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphAnchorContext paragraphAnchor() {
			return GetRuleContext<ParagraphAnchorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphReferenceContext paragraphReference() {
			return GetRuleContext<ParagraphReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphCommandContext paragraphCommand() {
			return GetRuleContext<ParagraphCommandContext>(0);
		}
		public CsharpSingleLineCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csharpSingleLineComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterCsharpSingleLineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitCsharpSingleLineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsharpSingleLineComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsharpSingleLineCommentContext csharpSingleLineComment() {
		CsharpSingleLineCommentContext _localctx = new CsharpSingleLineCommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_csharpSingleLineComment);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(SlashSlash);
				State = 37;
				paragraphAnchor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				Match(SlashSlash);
				State = 39;
				paragraphReference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				Match(SlashSlash);
				State = 41;
				paragraphCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphAnchorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(CSharpLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(CSharpLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		public ParagraphAnchorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphAnchor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphAnchorContext paragraphAnchor() {
		ParagraphAnchorContext _localctx = new ParagraphAnchorContext(Context, State);
		EnterRule(_localctx, 6, RULE_paragraphAnchor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(Paragraph);
			State = 45;
			anchor();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 46;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Paragraph() { return GetTokens(CSharpLanguageParser.Paragraph); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph(int i) {
			return GetToken(CSharpLanguageParser.Paragraph, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ParagraphReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphReferenceContext paragraphReference() {
		ParagraphReferenceContext _localctx = new ParagraphReferenceContext(Context, State);
		EnterRule(_localctx, 8, RULE_paragraphReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(Paragraph);
			State = 50;
			reference();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 51;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParagraphGreater() { return GetToken(CSharpLanguageParser.ParagraphGreater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommandName() { return GetToken(CSharpLanguageParser.CommandName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnchorContext anchor() {
			return GetRuleContext<AnchorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Paragraph() { return GetToken(CSharpLanguageParser.Paragraph, 0); }
		public ParagraphCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraphCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterParagraphCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitParagraphCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraphCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphCommandContext paragraphCommand() {
		ParagraphCommandContext _localctx = new ParagraphCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_paragraphCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(ParagraphGreater);
			State = 55;
			Match(CommandName);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Hash) {
				{
				State = 56;
				anchor();
				}
			}

			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Paragraph) {
				{
				State = 59;
				Match(Paragraph);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnchorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContentPathContext contentPath() {
			return GetRuleContext<ContentPathContext>(0);
		}
		public AnchorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anchor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitAnchor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnchor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnchorContext anchor() {
		AnchorContext _localctx = new AnchorContext(Context, State);
		EnterRule(_localctx, 12, RULE_anchor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			contentPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentPathContext contentPath() {
			return GetRuleContext<ContentPathContext>(0);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 14, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			filePath();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Hash) {
				{
				State = 65;
				contentPath();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(CSharpLanguageParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FileName() { return GetTokens(CSharpLanguageParser.FileName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileName(int i) {
			return GetToken(CSharpLanguageParser.FileName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Slash() { return GetTokens(CSharpLanguageParser.Slash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash(int i) {
			return GetToken(CSharpLanguageParser.Slash, i);
		}
		public ContentPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterContentPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitContentPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContentPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContentPathContext contentPath() {
		ContentPathContext _localctx = new ContentPathContext(Context, State);
		EnterRule(_localctx, 16, RULE_contentPath);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(Hash);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Slash) {
				{
				State = 69;
				Match(Slash);
				}
			}

			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 72;
					Match(FileName);
					State = 73;
					Match(Slash);
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 79;
			Match(FileName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FileName() { return GetTokens(CSharpLanguageParser.FileName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileName(int i) {
			return GetToken(CSharpLanguageParser.FileName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DirectorySeperator() { return GetTokens(CSharpLanguageParser.DirectorySeperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectorySeperator(int i) {
			return GetToken(CSharpLanguageParser.DirectorySeperator, i);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.EnterFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpLanguageListener typedListener = listener as ICSharpLanguageListener;
			if (typedListener != null) typedListener.ExitFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharpLanguageVisitor<TResult> typedVisitor = visitor as ICSharpLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilePath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilePathContext filePath() {
		FilePathContext _localctx = new FilePathContext(Context, State);
		EnterRule(_localctx, 18, RULE_filePath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 81;
					Match(FileName);
					State = 82;
					Match(DirectorySeperator);
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 88;
			Match(FileName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,91,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,0,1,0,1,
		0,3,0,32,8,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,43,8,2,1,3,1,3,1,
		3,3,3,48,8,3,1,4,1,4,1,4,3,4,53,8,4,1,5,1,5,1,5,3,5,58,8,5,1,5,3,5,61,
		8,5,1,6,1,6,1,7,1,7,3,7,67,8,7,1,8,1,8,3,8,71,8,8,1,8,1,8,5,8,75,8,8,10,
		8,12,8,78,9,8,1,8,1,8,1,9,1,9,5,9,84,8,9,10,9,12,9,87,9,9,1,9,1,9,1,9,
		0,0,10,0,2,4,6,8,10,12,14,16,18,0,1,1,1,15,15,92,0,25,1,0,0,0,2,33,1,0,
		0,0,4,42,1,0,0,0,6,44,1,0,0,0,8,49,1,0,0,0,10,54,1,0,0,0,12,62,1,0,0,0,
		14,64,1,0,0,0,16,68,1,0,0,0,18,85,1,0,0,0,20,21,3,4,2,0,21,22,5,15,0,0,
		22,24,1,0,0,0,23,20,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,
		26,31,1,0,0,0,27,25,1,0,0,0,28,29,3,4,2,0,29,30,7,0,0,0,30,32,1,0,0,0,
		31,28,1,0,0,0,31,32,1,0,0,0,32,1,1,0,0,0,33,34,3,4,2,0,34,35,5,15,0,0,
		35,3,1,0,0,0,36,37,5,6,0,0,37,43,3,6,3,0,38,39,5,6,0,0,39,43,3,8,4,0,40,
		41,5,6,0,0,41,43,3,10,5,0,42,36,1,0,0,0,42,38,1,0,0,0,42,40,1,0,0,0,43,
		5,1,0,0,0,44,45,5,12,0,0,45,47,3,12,6,0,46,48,5,12,0,0,47,46,1,0,0,0,47,
		48,1,0,0,0,48,7,1,0,0,0,49,50,5,12,0,0,50,52,3,14,7,0,51,53,5,12,0,0,52,
		51,1,0,0,0,52,53,1,0,0,0,53,9,1,0,0,0,54,55,5,14,0,0,55,57,5,1,0,0,56,
		58,3,12,6,0,57,56,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,59,61,5,12,0,0,60,
		59,1,0,0,0,60,61,1,0,0,0,61,11,1,0,0,0,62,63,3,16,8,0,63,13,1,0,0,0,64,
		66,3,18,9,0,65,67,3,16,8,0,66,65,1,0,0,0,66,67,1,0,0,0,67,15,1,0,0,0,68,
		70,5,11,0,0,69,71,5,5,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,76,1,0,0,0,72,
		73,5,4,0,0,73,75,5,5,0,0,74,72,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,
		77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,80,5,4,0,0,80,17,1,0,0,0,81,
		82,5,4,0,0,82,84,5,7,0,0,83,81,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,
		86,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,0,88,89,5,4,0,0,89,19,1,0,0,0,11,
		25,31,42,47,52,57,60,66,70,76,85
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
