//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DetailsLanguage.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class DetailsLanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CommandName=1, Letters=2, Minus=3, FileName=4, Slash=5, SlashSlash=6, 
		DirectorySeperator=7, MarkdownExtension=8, CSharpExtension=9, HTMLExtension=10, 
		Hash=11, Paragraph=12, NotParagraph=13, ParagraphGreater=14, NewLine=15, 
		WhiteSpace=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"CommandName", "Letters", "Minus", "FileName", "Slash", "SlashSlash", 
		"DirectorySeperator", "MarkdownExtension", "CSharpExtension", "HTMLExtension", 
		"Hash", "Paragraph", "NotParagraph", "ParagraphGreater", "NewLine", "WhiteSpace", 
		"InputCharacter"
	};


	public DetailsLanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DetailsLanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'-'", null, "'/'", "'//'", null, "'.md'", "'.cs'", 
		"'.html'", null, null, null, "'\\u00A7>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CommandName", "Letters", "Minus", "FileName", "Slash", "SlashSlash", 
		"DirectorySeperator", "MarkdownExtension", "CSharpExtension", "HTMLExtension", 
		"Hash", "Paragraph", "NotParagraph", "ParagraphGreater", "NewLine", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DetailsLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DetailsLanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,16,93,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,1,4,1,41,8,1,11,1,12,1,42,1,2,
		1,2,1,3,4,3,48,8,3,11,3,12,3,49,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,13,1,14,4,14,83,8,14,11,14,12,14,84,1,15,4,15,88,8,15,
		11,15,12,15,89,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,0,1,0,8,2,0,65,90,97,122,
		5,0,45,46,48,57,65,90,95,95,97,122,2,0,47,47,92,92,1,0,35,35,1,0,167,167,
		2,0,10,10,13,13,2,0,9,9,32,32,4,0,10,10,13,13,133,133,8232,8233,95,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,35,1,0,0,0,
		3,40,1,0,0,0,5,44,1,0,0,0,7,47,1,0,0,0,9,51,1,0,0,0,11,53,1,0,0,0,13,56,
		1,0,0,0,15,58,1,0,0,0,17,62,1,0,0,0,19,66,1,0,0,0,21,72,1,0,0,0,23,74,
		1,0,0,0,25,76,1,0,0,0,27,78,1,0,0,0,29,82,1,0,0,0,31,87,1,0,0,0,33,91,
		1,0,0,0,35,36,3,3,1,0,36,37,3,5,2,0,37,38,3,3,1,0,38,2,1,0,0,0,39,41,7,
		0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,4,1,0,
		0,0,44,45,5,45,0,0,45,6,1,0,0,0,46,48,7,1,0,0,47,46,1,0,0,0,48,49,1,0,
		0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,8,1,0,0,0,51,52,5,47,0,0,52,10,1,0,
		0,0,53,54,5,47,0,0,54,55,5,47,0,0,55,12,1,0,0,0,56,57,7,2,0,0,57,14,1,
		0,0,0,58,59,5,46,0,0,59,60,5,109,0,0,60,61,5,100,0,0,61,16,1,0,0,0,62,
		63,5,46,0,0,63,64,5,99,0,0,64,65,5,115,0,0,65,18,1,0,0,0,66,67,5,46,0,
		0,67,68,5,104,0,0,68,69,5,116,0,0,69,70,5,109,0,0,70,71,5,108,0,0,71,20,
		1,0,0,0,72,73,7,3,0,0,73,22,1,0,0,0,74,75,7,4,0,0,75,24,1,0,0,0,76,77,
		8,4,0,0,77,26,1,0,0,0,78,79,5,167,0,0,79,80,5,62,0,0,80,28,1,0,0,0,81,
		83,7,5,0,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,
		30,1,0,0,0,86,88,7,6,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,
		90,1,0,0,0,90,32,1,0,0,0,91,92,8,7,0,0,92,34,1,0,0,0,5,0,42,49,84,89,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
