{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/DetailsCodeLinkDefinitionProvider.ts", "../src/DetailsDocumentLink.ts", "../src/DetailsDocuLinkDefinitionProvider.ts", "../src/DetailsExtensionState.ts", "../src/CacheFileWatcher.ts", "../src/DetailsFileWatcher.ts", "../src/DetailsLinkDefinitionProvider.ts"],
  "sourcesContent": ["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport { CacheFileWatcher } from \"./CacheFileWatcher\";\nimport { DetailsCodeLinkDefinitionProvider } from \"./DetailsCodeLinkDefinitionProvider\";\nimport { DetailsDocuLinkDefinitionProvider } from \"./DetailsDocuLinkDefinitionProvider\";\nimport { DetailsExtensionState } from \"./DetailsExtensionState\";\nimport { DetailsFileWatcher } from \"./DetailsFileWatcher\";\nimport { DetailsLinkDefinitionProvider } from \"./DetailsLinkDefinitionProvider\";\n//import { DetailsDocuLinkCompletionItemProvider } from \"./DetailsDocuLinkCompletionItemProvider\";\n\nlet state = new DetailsExtensionState();\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(\"vscode-brimborium-details-link activate\");\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  //   console.log(\n  //     'Congratulations, your extension \"vscode-brimborium-details-link\" is now active!'\n  //   );\n  context.subscriptions.push(\n    state\n  );\n\n  context.subscriptions.push(\n    vscode.workspace.onDidChangeWorkspaceFolders((event) => {\n      event.removed.forEach((folder) => {\n        state.removeWorkspaceFolder(folder);\n      });\n      event.added.forEach((folder) => {\n        state.addWorkspaceFolder(folder);\n      });\n    })\n  );\n  vscode.workspace.workspaceFolders?.forEach((folder) => {\n    state.addWorkspaceFolder(folder);\n  });\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"vscode-brimborium-details-link.showDetails\",\n      () => {\n        // The code you place here will be executed every time your command is executed\n        // Display a message box to the user\n        showDetails();\n      }\n    )\n  );\n\n  context.subscriptions.push(\n    vscode.languages.registerDocumentLinkProvider(\n      { language: \"markdown\" },\n      new DetailsCodeLinkDefinitionProvider(state)\n    )\n  );\n  context.subscriptions.push(\n    vscode.languages.registerDocumentLinkProvider(\n      { language: \"markdown\" },\n      new DetailsDocuLinkDefinitionProvider(state)\n    )\n  );\n\n  context.subscriptions.push(\n    vscode.languages.registerDocumentLinkProvider(\n      { language: \"csharp\" },\n      new DetailsDocuLinkDefinitionProvider(state)\n    )\n  );\n\n  context.subscriptions.push(\n    vscode.languages.registerDocumentLinkProvider(\n      { language: \"csharp\" },\n      new DetailsLinkDefinitionProvider(\"//\", state)\n    )\n  );\n\n  /*\n  context.subscriptions.push(\n\tvscode.languages.registerCompletionItemProvider(\n\t\t{ language: \"csharp\" },\n\t\tnew DetailsDocuLinkCompletionItemProvider(state),\n\t));\n\t*/\n}\n\nasync function showDetails() {\n  vscode.window.showInformationMessage(JSON.stringify(state));\n\n  //const rootFolder = vscode.workspace.asRelativePath(\"details.json\");\n  //const detailsJson = vscode.workspace.asRelativePath(\"details.json\");\n  // vscode.workspace.fs.stat(vscode.Uri.file(detailsJson)).then((stat) => {\n  // \tvscode.window.showInformationMessage(detailsJson);\n  // });\n\n  // vscode.workspace.findFiles('details.json').then((uris) => {\n  // \tvar uriAsString = uris.map((uri) => uri.toString()).join(\"; \");\n  // \tvscode.window.showInformationMessage(detailsJson);\n  // \tif (uris.length === 1){\n  // \t\tvscode.workspace.fs.readFile(uris[0]).then((data) => {\n  // \t\t\t});\n  // \t}\n  // });\n\n  /*\n\tif (detailsJson) {\n\t\tvscode.window.showInformationMessage(detailsJson);\n\t} else {\n\t\tvscode.window.showErrorMessage('No details.json found.');\n\t}\n\t*/\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n", "import * as vscode from \"vscode\";\r\nimport { DetailsDocumentLink } from \"./DetailsDocumentLink\";\r\nimport type { DetailsExtensionState } from \"./DetailsExtensionState\";\r\n\r\n\r\n\r\n/**\r\n * A {@link DocumentLinkProvider document link provider} that detects links to details files.\r\n * detailscode://path/to/code.ext#linenumber\u00A7marker\r\n */\r\nexport class DetailsCodeLinkDefinitionProvider\r\n  implements vscode.DocumentLinkProvider<vscode.DocumentLink>\r\n{\r\n  regExpDetailscodeGlobal = new RegExp(\r\n    \"detailscode://([^ #]*)([#][1-9]*)?([\u00A7].*)?\",\r\n    \"g\"\r\n  );\r\n  regExpDetailscodeLocal = new RegExp(\r\n    \"detailscode://([^ #]*)([#][1-9]*)?([\u00A7].*)?\",\r\n  );\r\n  constructor(private state: DetailsExtensionState) {\r\n\r\n  }\r\n  /**\r\n   * Provide links for the given document. Note that the editor ships with a default provider that detects\r\n   * `http(s)` and `file` links.\r\n   *\r\n   * @param document The document in which the command was invoked.\r\n   * @param token A cancellation token.\r\n   * @return An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result\r\n   * can be signaled by returning `undefined`, `null`, or an empty array.\r\n   */\r\n  provideDocumentLinks(\r\n    document: vscode.TextDocument,\r\n    token: vscode.CancellationToken\r\n  ): vscode.ProviderResult<vscode.DocumentLink[]> {\r\n    const text = document.getText();\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n\r\n    const links: DetailsDocumentLink[] = [];\r\n    let match: RegExpExecArray | null;\r\n    while ((match = this.regExpDetailscodeGlobal.exec(text))) {\r\n      const start = document.positionAt(match.index);\r\n      const end = document.positionAt(match.index + match[0].length);\r\n      const range = new vscode.Range(start, end);\r\n      links.push(\r\n        new DetailsDocumentLink(range, undefined, match[0], document.fileName)\r\n      );\r\n      if (token.isCancellationRequested) {\r\n        return undefined;\r\n      }\r\n    }\r\n    return links;\r\n  }\r\n\r\n  /**\r\n   * Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete\r\n   * link is selected in the UI. Providers can implement this method and return incomplete links\r\n   * (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which\r\n   * often helps to improve performance.\r\n   *\r\n   * @param link The link that is to be resolved.\r\n   * @param token A cancellation token.\r\n   */\r\n  async resolveDocumentLink(\r\n    link: DetailsDocumentLink,\r\n    token: vscode.CancellationToken\r\n  ) /*: vscode.ProviderResult<vscode.DocumentLink>*/ {\r\n    if (link.filename === undefined) {\r\n      return undefined;\r\n    }\r\n    const workspaceState = this.state.getWorkspaceStateByFileName(\r\n      link.filename\r\n    );\r\n    if (workspaceState === undefined) {\r\n      return undefined;\r\n    }\r\n    const detailsRoot = await workspaceState.getDetailsRoot(token);\r\n    if (detailsRoot === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!link.tooltip) {\r\n      return undefined;\r\n    }\r\n\r\n    const match = link.tooltip.match(this.regExpDetailscodeLocal);\r\n    if (match === null) {\r\n      return undefined;\r\n    }\r\n\r\n    let targetPath = match[1];\r\n    if (!targetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n    const targetUri = await workspaceState.getCodePath(targetPath, token);\r\n    if (targetUri === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    link.target = targetUri;\r\n    console.log(\"resolveDocumentLink: %s\", targetUri.toString());\r\n    return link;\r\n  }\r\n}\r\n", "import * as vscode from \"vscode\";\r\n\r\nexport class DetailsDocumentLink extends vscode.DocumentLink{\r\n  constructor(\r\n    range: vscode.Range, \r\n    target: vscode.Uri| undefined, \r\n    tooltip: string | undefined,\r\n    public readonly filename: string | undefined) {\r\n    super(range);\r\n    this.target = target;\r\n    this.tooltip = tooltip;\r\n  }\r\n}", "import * as vscode from \"vscode\";\r\nimport { DetailsDocumentLink } from \"./DetailsDocumentLink\";\r\nimport type { DetailsExtensionState } from \"./DetailsExtensionState\";\r\n\r\n/**\r\n * A {@link DocumentLinkProvider document link provider} that detects links to details files.\r\n * details://<detailsfile>\r\n * DetailsCodeLinkDefinitionProvider\r\n *\r\n */\r\nexport class DetailsDocuLinkDefinitionProvider\r\n  implements vscode.DocumentLinkProvider<DetailsDocumentLink>\r\n{\r\n  regexpDetailsGlobal: RegExp;\r\n  regexpDetailsLocal: RegExp;\r\n\r\n  constructor(private state: DetailsExtensionState) {\r\n    const e = \"details://([^)#]*)([#][1-9]*)?([\u00A7].*)?\";\r\n    this.regexpDetailsGlobal = new RegExp(e, \"g\");\r\n    this.regexpDetailsLocal = new RegExp(e);\r\n  }\r\n  /**\r\n   * Provide links for the given document. Note that the editor ships with a default provider that detects\r\n   * `http(s)` and `file` links.\r\n   *\r\n   * @param document The document in which the command was invoked.\r\n   * @param token A cancellation token.\r\n   * @return An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result\r\n   * can be signaled by returning `undefined`, `null`, or an empty array.\r\n   */\r\n  provideDocumentLinks(\r\n    document: vscode.TextDocument,\r\n    token: vscode.CancellationToken\r\n  ): vscode.ProviderResult<DetailsDocumentLink[]> {\r\n    const text = document.getText();\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n    const workspaceState = this.state.getWorkspaceStateByFileName(\r\n      document.fileName\r\n    );\r\n\r\n    const links: DetailsDocumentLink[] = [];\r\n    let match: RegExpExecArray | null;\r\n    while ((match = this.regexpDetailsGlobal.exec(text))) {\r\n      const start = document.positionAt(match.index);\r\n      const end = document.positionAt(match.index + match[0].length);\r\n      const range = new vscode.Range(start, end);\r\n      links.push(\r\n        new DetailsDocumentLink(range, undefined, match[0], document.fileName)\r\n      );\r\n      if (token.isCancellationRequested) {\r\n        return undefined;\r\n      }\r\n    }\r\n    return links;\r\n  }\r\n\r\n  /**\r\n   * Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete\r\n   * link is selected in the UI. Providers can implement this method and return incomplete links\r\n   * (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which\r\n   * often helps to improve performance.\r\n   *\r\n   * @param link The link that is to be resolved.\r\n   * @param token A cancellation token.\r\n   */\r\n  async resolveDocumentLink(\r\n    link: DetailsDocumentLink,\r\n    token: vscode.CancellationToken\r\n  ) /*: vscode.ProviderResult<DetailsDocumentLink>*/ {\r\n    if (link.filename === undefined) {\r\n      return undefined;\r\n    }\r\n    const workspaceState = this.state.getWorkspaceStateByFileName(\r\n      link.filename\r\n    );\r\n    if (workspaceState === undefined) {\r\n      return undefined;\r\n    }\r\n    const detailsRoot = await workspaceState.getDetailsRoot(token);\r\n    if (detailsRoot === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!link.tooltip) {\r\n      return undefined;\r\n    }\r\n\r\n    const match = link.tooltip.match(this.regexpDetailsLocal);\r\n    if (match === null) {\r\n      return undefined;\r\n    }\r\n\r\n    let targetPath = match[1];\r\n    if (!targetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n    const targetUri = await workspaceState.getDetailsPath(targetPath, token);\r\n    if (targetUri === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    link.target = targetUri;\r\n    console.log(\"resolveDocumentLink: %s\", targetUri.toString());\r\n    return link;\r\n  }\r\n}\r\n", "import * as vscode from \"vscode\";\r\nimport { CacheFileWatcher, CacheItem } from \"./CacheFileWatcher\";\r\nimport { DetailsFileWatcher } from \"./DetailsFileWatcher\";\r\n\r\n/*eslint-disable */\r\nexport type DetailsJSON = {\r\n  detailsConfigurationUri?: vscode.Uri;\r\n  detailsRootUri?: vscode.Uri;\r\n  detailsFolderUri?: vscode.Uri;\r\n  DetailsConfiguration?: string;\r\n  DetailsRoot?: string;\r\n  SolutionFile?: string;\r\n  DetailsFolder?: string;\r\n};\r\n/*eslint-enable */\r\nexport class DetailsExtensionState {\r\n  private workspaceStates: Map<string, WorkspaceState> = new Map<\r\n    string,\r\n    WorkspaceState\r\n  >();\r\n  getWorkspaceStateIdByFileName(fileName: string) {\r\n    const workspaceFolder = vscode.workspace.getWorkspaceFolder(\r\n      vscode.Uri.parse(fileName, true)\r\n    );\r\n    return workspaceFolder === undefined ? \"#\" : workspaceFolder.uri.toString();\r\n  }\r\n\r\n  getWorkspaceStateIdByWorkspaceFolder(\r\n    workspaceFolder: vscode.WorkspaceFolder | undefined\r\n  ) {\r\n    return workspaceFolder === undefined ? \"#\" : workspaceFolder.uri.toString();\r\n  }\r\n\r\n  getWorkspaceStateByFileName(fileName: string) {\r\n    const workspaceFolder = vscode.workspace.getWorkspaceFolder(\r\n      vscode.Uri.file(fileName)\r\n    );\r\n    const workspaceFolderId =\r\n      workspaceFolder === undefined ? \"#\" : workspaceFolder.uri.toString();\r\n    let workspaceState = this.workspaceStates.get(workspaceFolderId);\r\n    if (workspaceState !== undefined) {\r\n      if (workspaceState.ensureNotDirty()) {\r\n        workspaceState = undefined;\r\n      }\r\n    }\r\n    if (workspaceState === undefined) {\r\n      workspaceState = new WorkspaceState(workspaceFolder, workspaceFolderId);\r\n      this.workspaceStates.set(workspaceFolderId, workspaceState);\r\n    }\r\n    return workspaceState;\r\n  }\r\n\r\n  getWorkspaceStateById(\r\n    workspaceFolderId: string,\r\n    workspaceFolder: vscode.WorkspaceFolder | undefined = undefined\r\n  ) {\r\n    let workspaceState = this.workspaceStates.get(workspaceFolderId);\r\n    if (workspaceState !== undefined) {\r\n      if (workspaceState.ensureNotDirty()) {\r\n        workspaceState = undefined;\r\n      }\r\n    }\r\n    if (workspaceState === undefined) {\r\n      if (workspaceFolder !== undefined) {\r\n        workspaceState = new WorkspaceState(workspaceFolder, workspaceFolderId);\r\n        this.workspaceStates.set(workspaceFolderId, workspaceState);\r\n      }\r\n    }\r\n    return workspaceState;\r\n  }\r\n\r\n  addWorkspaceFolder(workspaceFolder: vscode.WorkspaceFolder) {\r\n    return this.getWorkspaceStateById(\r\n      this.getWorkspaceStateIdByWorkspaceFolder(workspaceFolder),\r\n      workspaceFolder\r\n    );\r\n  }\r\n\r\n  removeWorkspaceFolder(workspaceFolder: vscode.WorkspaceFolder) {\r\n    const workspaceFolderId =\r\n      this.getWorkspaceStateIdByWorkspaceFolder(workspaceFolder);\r\n    let workspaceState = this.workspaceStates.get(workspaceFolderId);\r\n    if (workspaceState !== undefined) {\r\n      workspaceState.dispose();\r\n    }\r\n    this.workspaceStates.delete(workspaceFolderId);\r\n  }\r\n\r\n  dispose() {\r\n    this.workspaceStates.forEach((workspaceState) => {\r\n      workspaceState.dispose();\r\n    });\r\n    this.workspaceStates.clear();\r\n  }\r\n}\r\n\r\nexport class WorkspaceState {\r\n  private detailsConfiguration: string | undefined;\r\n  private detailsRoot: string | undefined;\r\n  private solutionFile: string | undefined;\r\n  private detailsFolder: string | undefined;\r\n\r\n  private detailsRootUri: vscode.Uri | undefined;\r\n  private detailsConfigurationUri: vscode.Uri | undefined;\r\n  private detailsFolderUri: vscode.Uri | undefined;\r\n\r\n  onStateChanged: (() => void) | undefined;\r\n  private workspaceFolderUri: vscode.Uri | undefined;\r\n\r\n  constructor(\r\n    private readonly workspaceFolder: vscode.WorkspaceFolder | undefined,\r\n    public readonly id: string\r\n  ) {\r\n    this.workspaceFolderUri = this.workspaceFolder?.uri;\r\n  }\r\n\r\n  // getFolderUri() {\r\n  //   if (this.workspaceFolder === undefined) {\r\n  //     return undefined;\r\n  //   } else {\r\n  //     return this.workspaceFolder.uri;\r\n  //   }\r\n  // }\r\n  private detailsFileWatcher: DetailsFileWatcher | undefined;\r\n  private cacheWatcherDetails: CacheFileWatcher | undefined;\r\n  private cacheWatcherCode: CacheFileWatcher | undefined;\r\n\r\n  ensureNotDirty(\r\n    workspaceFolder: vscode.WorkspaceFolder | undefined = undefined\r\n  ) {\r\n    if (this.workspaceFolder === undefined && workspaceFolder === undefined) {\r\n      return false;\r\n    }\r\n    if (this.workspaceFolder === undefined && workspaceFolder !== undefined) {\r\n      return true;\r\n    }\r\n    const uri = this.workspaceFolder?.uri;\r\n    if (this.workspaceFolderUri === uri) {\r\n      // OK\r\n    } else if (this.workspaceFolderUri === undefined && uri === undefined) {\r\n      // OK\r\n    } else {\r\n      this.workspaceFolderUri = uri;\r\n      this.dispose();\r\n      this.start();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isStarted: Promise<void> | undefined = undefined;\r\n  async start() {\r\n    if (this.workspaceFolder === undefined) {\r\n      return false;\r\n    } else {\r\n      if (this.isStarted === undefined) {\r\n        this.isStarted = new Promise(async (resolve, reject) => {\r\n          try {\r\n            if (this.workspaceFolder === undefined) {\r\n              resolve();\r\n              return;\r\n            }\r\n            if (this.detailsFileWatcher === undefined) {\r\n              const found = await vscode.workspace.findFiles(\r\n                new vscode.RelativePattern(\r\n                  this.workspaceFolderUri!,\r\n                  \"**/details.json\"\r\n                ),\r\n                \"**/node_modules/**\",\r\n                2\r\n              );\r\n              if (found.length > 0) {\r\n                this.detailsFileWatcher = new DetailsFileWatcher(\r\n                  this.workspaceFolder,\r\n                  found[0],\r\n                  (details) => {\r\n                    this.setDetailsJson(details);\r\n                  }\r\n                );\r\n              } else {\r\n                this.detailsFileWatcher = new DetailsFileWatcher(\r\n                  this.workspaceFolder,\r\n                  vscode.Uri.joinPath(this.workspaceFolder.uri, \"details.json\"),\r\n                  (details) => {\r\n                    this.setDetailsJson(details);\r\n                  }\r\n                );\r\n              }\r\n              this.detailsFileWatcher.start();\r\n            }\r\n            if (this.cacheWatcherDetails === undefined) {\r\n              this.cacheWatcherDetails = new CacheFileWatcher(\r\n                this.workspaceFolder,\r\n                (cache) => {\r\n                  this.setCacheDetails(cache);\r\n                }\r\n              );\r\n            }\r\n            if (this.cacheWatcherCode === undefined) {\r\n              this.cacheWatcherCode = new CacheFileWatcher(\r\n                this.workspaceFolder,\r\n                (cache) => {\r\n                  this.setCacheCode(cache);\r\n                }\r\n              );\r\n            }\r\n            if (this.detailsFileWatcher !== undefined) {\r\n              await this.detailsFileWatcher.start();\r\n            }\r\n\r\n            resolve();\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    await this.isStarted;\r\n    return true;\r\n  }\r\n\r\n  setDetailsJson(details: DetailsJSON | undefined): void {\r\n    this.detailsConfiguration = details?.DetailsConfiguration;\r\n    this.detailsConfigurationUri = details?.detailsConfigurationUri;\r\n    this.detailsRoot = details?.DetailsRoot;\r\n    this.detailsRootUri = details?.detailsRootUri;\r\n    this.solutionFile = details?.SolutionFile;\r\n    this.detailsFolder = details?.DetailsFolder;\r\n    this.detailsFolderUri = details?.detailsFolderUri;\r\n\r\n    if (this.onStateChanged) {\r\n      this.onStateChanged();\r\n    }\r\n\r\n    if (this.detailsFolderUri !== undefined) {\r\n      if (this.cacheWatcherDetails !== undefined) {\r\n        this.cacheWatcherDetails.start(\r\n          vscode.Uri.joinPath(this.detailsFolderUri, \"cache-details-links.json\")\r\n        );\r\n      }\r\n      if (this.cacheWatcherCode !== undefined) {\r\n        this.cacheWatcherCode.start(\r\n          vscode.Uri.joinPath(this.detailsFolderUri, \"cache-code-links.json\")\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  cacheCode: CacheItem[] = [];\r\n  setCacheCode(cache: CacheItem[]) {\r\n    this.cacheCode = cache || [];\r\n  }\r\n\r\n  cacheDetails: CacheItem[] = [];\r\n  setCacheDetails(cache: CacheItem[]) {\r\n    this.cacheDetails = cache || [];\r\n  }\r\n\r\n  dispose() {\r\n    if (this.detailsFileWatcher) {\r\n      this.detailsFileWatcher.dispose();\r\n      this.detailsFileWatcher = undefined;\r\n    }\r\n    if (this.cacheWatcherCode) {\r\n      this.cacheWatcherCode.dispose();\r\n      this.cacheWatcherCode = undefined;\r\n    }\r\n    if (this.cacheWatcherDetails) {\r\n      this.cacheWatcherDetails.dispose();\r\n      this.cacheWatcherDetails = undefined;\r\n    }\r\n    this.isStarted = undefined;\r\n  }\r\n\r\n  async getDetailsRoot(token: vscode.CancellationToken) {\r\n    if (await this.start()) {\r\n      return this.detailsRootUri;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async getDetailsFolder(token: vscode.CancellationToken) {\r\n    if (await this.start()) {\r\n      return this.detailsFolderUri;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async getDetailsPath(targetPath: string, token: vscode.CancellationToken) {\r\n    const detailsRoot = await this.getDetailsFolder(token);\r\n    if (detailsRoot === undefined) {\r\n      return undefined;\r\n    }\r\n    // TODO: lookup in cache or service\r\n\r\n    // hack for now\r\n    const pos = targetPath.indexOf(\".md\");\r\n    if (pos > 0) {\r\n      targetPath = targetPath.substring(0, pos + 3);\r\n    }\r\n\r\n    const targetUri = vscode.Uri.joinPath(detailsRoot, targetPath);\r\n    return targetUri;\r\n  }\r\n\r\n  async getCodePath(targetPath: string, token: vscode.CancellationToken) {\r\n    const detailsRoot = await this.getDetailsRoot(token);\r\n    if (detailsRoot === undefined) {\r\n      return undefined;\r\n    }\r\n    // TODO: lookup in cache or service\r\n\r\n    // hack for now\r\n    const match = targetPath.match(/([-._A-Z0-9/\\\\]+)(\\.cs)|(\\.ts)|(\\.html)/i);\r\n    if (match === null) {\r\n      return undefined;\r\n    }\r\n\r\n    const found = await vscode.workspace.findFiles(\r\n      new vscode.RelativePattern(this.workspaceFolderUri!, \"**/\" + match[0])\r\n    );\r\n    if (found.length > 0) {\r\n      return found[0];\r\n    }\r\n    return undefined;\r\n    // const targetUri = vscode.Uri.joinPath(detailsRoot, targetPath);\r\n    // return targetUri;\r\n  }\r\n}\r\n", "import * as vscode from \"vscode\";\r\n\r\nexport type CacheItem = {\r\n  name: string;\r\n  path: string;\r\n  line?: number | undefined;\r\n};\r\n\r\nexport class CacheFileWatcher {\r\n  private watcher: vscode.Disposable | undefined;\r\n  private currentCacheUri: vscode.Uri | undefined;\r\n  constructor(\r\n    private workspaceFolder: vscode.WorkspaceFolder,\r\n    private setCache: (cache: CacheItem[]) => void\r\n    ) {}\r\n\r\n  private isStarted: Promise<void> | undefined = undefined;\r\n\r\n  async start(uri: vscode.Uri) {\r\n    if (\r\n      this.currentCacheUri &&\r\n      this.currentCacheUri.fsPath === uri.fsPath &&\r\n      this.isStarted !== undefined\r\n    ) {\r\n      await this.isStarted;\r\n    }\r\n    if (this.isStarted === undefined) {\r\n      this.dispose();\r\n      this.isStarted = new Promise(async (resolve, reject) => {\r\n        try {\r\n          this.currentCacheUri = uri;\r\n          const pattern=new vscode.RelativePattern(\r\n            this.workspaceFolder, \r\n            vscode.workspace.asRelativePath(uri));\r\n          this.watcher = vscode.workspace\r\n            .createFileSystemWatcher(pattern)\r\n            .onDidChange((e) => {\r\n              if (e.toString() === uri.toString()) {\r\n                this.readCacheJson(e);\r\n              }\r\n            });\r\n          await this.readCacheJson(uri);\r\n          resolve();\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      });\r\n    }\r\n    await this.isStarted;\r\n  }\r\n\r\n  dispose() {\r\n    if (this.watcher) {\r\n      this.watcher.dispose();\r\n      this.watcher = undefined;\r\n    }\r\n    this.isStarted = undefined;\r\n  }\r\n\r\n  async readCacheJson(e: vscode.Uri) {\r\n    var data = await vscode.workspace.fs.readFile(e);\r\n    const content = Buffer.from(data).toString(\"utf8\");\r\n    const cacheRead = JSON.parse(content) as CacheItem[];\r\n    const cacheNext: CacheItem[] = [];\r\n    for (const item of cacheRead) {\r\n      if (\r\n        typeof item.name === \"string\" &&\r\n        item.name &&\r\n        typeof item.path === \"string\" &&\r\n        item.path &&\r\n        (typeof item.line === \"number\" || item.line === undefined)\r\n      ) {\r\n        cacheNext.push(item);\r\n      }\r\n    }\r\n    this.setCache(cacheNext);\r\n  }\r\n}\r\n", "import * as vscode from \"vscode\";\r\nvscode.Breakpoint;\r\nimport { DetailsJSON } from \"./DetailsExtensionState\";\r\n\r\n//import { isEqual, isEqualOrParent, normalize } from 'vs/base/common/paths';\r\n//isEqualOrParent()\r\nexport class DetailsFileWatcher {\r\n  private watcher: vscode.Disposable | undefined;\r\n  private currentDetails: DetailsJSON | undefined;\r\n  private chainedWatcher: DetailsFileWatcher | undefined;\r\n\r\n  constructor(\r\n    private workspaceFolder: vscode.WorkspaceFolder,\r\n    private detailsJsonUri: vscode.Uri,\r\n    private setDetails: (details: DetailsJSON | undefined) => void\r\n  ) {\r\n    this.watcher = vscode.workspace\r\n      .createFileSystemWatcher(\r\n        // new vscode.RelativePattern(this.workspaceFolder, this.detailsJsonUri)\r\n        this.detailsJsonUri.fsPath\r\n      )\r\n      .onDidChange((e) => {\r\n        this.readDetailsJson(e);\r\n      });\r\n  }\r\n\r\n  private isStarted: Promise<void> | undefined = undefined;\r\n\r\n  async start() {\r\n    if (this.isStarted === undefined) {\r\n      this.isStarted = new Promise(async (resolve, reject) => {\r\n        try {\r\n          \r\n          var detailsUris = await vscode.workspace.findFiles(\r\n            new vscode.RelativePattern(\r\n              this.workspaceFolder,\r\n              vscode.workspace.asRelativePath(this.detailsJsonUri))\r\n          );\r\n          if (detailsUris.length === 1) {\r\n            await this.readDetailsJson(detailsUris[0]);\r\n          }\r\n          resolve();\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      });\r\n    }\r\n    await this.isStarted;\r\n  }\r\n\r\n  async readDetailsJson(e: vscode.Uri) {\r\n    var detailsData = await vscode.workspace.fs.readFile(e);\r\n    const detailsContent = Buffer.from(detailsData).toString(\"utf8\");\r\n    const detailsRead = JSON.parse(detailsContent) as DetailsJSON;\r\n    const detailsNext: DetailsJSON = {\r\n      /*eslint-disable */\r\n      detailsConfigurationUri: undefined,\r\n      detailsRootUri: undefined,\r\n      detailsFolderUri: undefined,\r\n\r\n      DetailsConfiguration: \"\",\r\n      DetailsRoot: \"\",\r\n      SolutionFile: \"\",\r\n      DetailsFolder: \"\",\r\n      /*eslint-enable */\r\n    };\r\n\r\n    \r\n    if (detailsRead.DetailsConfiguration === \"\") {\r\n      detailsRead.DetailsConfiguration = undefined;\r\n    }\r\n    if (detailsRead.DetailsRoot === \".\") {\r\n      detailsRead.DetailsRoot = \"\";\r\n    }\r\n    if (detailsRead.DetailsFolder === \"\") {\r\n      detailsRead.DetailsFolder = \"details\";\r\n    }\r\n\r\n    if (\r\n      typeof detailsRead.DetailsRoot === \"string\" &&\r\n      detailsRead.DetailsRoot\r\n    ) {\r\n      let detailsRootUri = vscode.Uri.joinPath(e, \"..\", detailsRead.DetailsRoot);\r\n      detailsNext.detailsRootUri = detailsRootUri;\r\n      detailsNext.DetailsRoot = detailsRootUri.fsPath;\r\n    } else {\r\n      let detailsRootUri = vscode.Uri.joinPath(e, \"..\");\r\n      detailsNext.detailsRootUri = detailsRootUri;\r\n      detailsNext.DetailsRoot = detailsRootUri.fsPath;\r\n    }\r\n\r\n    if (\r\n      typeof detailsRead.DetailsConfiguration === \"string\" &&\r\n      detailsRead.DetailsConfiguration\r\n    ) {\r\n      detailsNext.detailsConfigurationUri = vscode.Uri.joinPath(\r\n        e,\r\n        \"..\",\r\n        detailsRead.DetailsConfiguration\r\n      );\r\n      detailsNext.DetailsConfiguration = detailsNext.detailsConfigurationUri.fsPath;\r\n    }\r\n\r\n    if (detailsRead.DetailsFolder){\r\n      if (detailsNext.detailsRootUri !== undefined){\r\n        detailsNext.detailsFolderUri = vscode.Uri.joinPath(detailsNext.detailsRootUri, detailsRead.DetailsFolder);\r\n        detailsNext.DetailsFolder = detailsNext.detailsFolderUri.fsPath;\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.currentDetails &&\r\n      this.currentDetails.DetailsConfiguration ===\r\n        detailsNext.DetailsConfiguration &&\r\n      this.currentDetails.DetailsRoot === detailsNext.DetailsRoot &&\r\n      this.currentDetails.SolutionFile === detailsNext.SolutionFile &&\r\n      this.currentDetails.DetailsFolder === detailsNext.DetailsFolder\r\n    ) {\r\n      // No change\r\n      return;\r\n    }\r\n\r\n    if (\r\n      detailsNext.detailsConfigurationUri &&\r\n      detailsNext.detailsConfigurationUri !==\r\n        this.currentDetails?.detailsConfigurationUri\r\n    ) {\r\n      this.currentDetails = detailsNext;\r\n      this.chainedWatcher = new DetailsFileWatcher(\r\n        this.workspaceFolder,\r\n        detailsNext.detailsConfigurationUri,\r\n        this.setDetails\r\n      );\r\n    } else {\r\n      if (this.chainedWatcher !== undefined) {\r\n        this.chainedWatcher.dispose();\r\n        this.chainedWatcher = undefined;\r\n      }\r\n      this.currentDetails = detailsNext;\r\n      /*eslint-disable */\r\n      this.setDetails({\r\n        ...detailsNext,\r\n        detailsConfigurationUri: e,\r\n        DetailsConfiguration: e.toString(),\r\n      });\r\n\r\n      /*eslint-enable */\r\n    }\r\n    this.isStarted = Promise.resolve();\r\n  }\r\n\r\n  dispose(): void {\r\n    this.watcher?.dispose();\r\n    this.watcher = undefined;\r\n  }\r\n}\r\n", "import * as vscode from \"vscode\";\r\nimport { DetailsDocumentLink } from \"./DetailsDocumentLink\";\r\nimport type { DetailsExtensionState } from \"./DetailsExtensionState\";\r\n\r\n/**\r\n * A {@link DocumentLinkProvider document link provider} that detects links to details files.\r\n * details://<detailsfile>\r\n * DetailsCodeLinkDefinitionProvider\r\n *\r\n */\r\nexport class DetailsLinkDefinitionProvider\r\n  implements vscode.DocumentLinkProvider<vscode.DocumentLink>\r\n{\r\n  regexpDetailsGlobal: RegExp;\r\n  regexpDetailsLocal: RegExp;\r\n\r\n  constructor(\r\n    private readonly commentPrefix: string,\r\n    private state: DetailsExtensionState\r\n  ) {\r\n    commentPrefix = `(${commentPrefix}[ \\t]*)`;\r\n    const e = commentPrefix + \"\u00A7[ \\t]*([^#\u00A7\\\\r\\\\n]+)\";\r\n    this.regexpDetailsGlobal = new RegExp(e, \"g\");\r\n    this.regexpDetailsLocal = new RegExp(e);\r\n  }\r\n  /**\r\n   * Provide links for the given document. Note that the editor ships with a default provider that detects\r\n   * `http(s)` and `file` links.\r\n   *\r\n   * @param document The document in which the command was invoked.\r\n   * @param token A cancellation token.\r\n   * @return An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result\r\n   * can be signaled by returning `undefined`, `null`, or an empty array.\r\n   */\r\n  provideDocumentLinks(\r\n    document: vscode.TextDocument,\r\n    token: vscode.CancellationToken\r\n  ): vscode.ProviderResult<vscode.DocumentLink[]> {\r\n    const text = document.getText();\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n\r\n    const links: DetailsDocumentLink[] = [];\r\n    let match: RegExpExecArray | null;\r\n    while ((match = this.regexpDetailsGlobal.exec(text))) {\r\n      const start = document.positionAt(match.index);\r\n      const end = document.positionAt(match.index + match[0].length);\r\n      const range = new vscode.Range(start, end);\r\n      links.push(\r\n        new DetailsDocumentLink(range, undefined, match[0], document.fileName)\r\n      );\r\n      if (token.isCancellationRequested) {\r\n        return undefined;\r\n      }\r\n    }\r\n    return links;\r\n  }\r\n\r\n  /**\r\n   * Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete\r\n   * link is selected in the UI. Providers can implement this method and return incomplete links\r\n   * (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which\r\n   * often helps to improve performance.\r\n   *\r\n   * @param link The link that is to be resolved.\r\n   * @param token A cancellation token.\r\n   */\r\n  async resolveDocumentLink(\r\n    link: DetailsDocumentLink,\r\n    token: vscode.CancellationToken\r\n  ) /*: vscode.ProviderResult<vscode.DocumentLink>*/ {\r\n    if (link.filename === undefined) {\r\n      return undefined;\r\n    }\r\n    const workspaceState = this.state.getWorkspaceStateByFileName(\r\n      link.filename\r\n    );\r\n    if (workspaceState === undefined) {\r\n      return undefined;\r\n    }\r\n    const detailsRoot = await workspaceState.getDetailsRoot(token);\r\n    if (detailsRoot === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!link.tooltip) {\r\n      return undefined;\r\n    }\r\n\r\n    const match = link.tooltip.match(this.regexpDetailsLocal);\r\n    if (match === null) {\r\n      return undefined;\r\n    }\r\n\r\n    let targetPath = match[2];\r\n    if (!targetPath) {\r\n      return undefined;\r\n    }\r\n\r\n    if (token.isCancellationRequested) {\r\n      return undefined;\r\n    }\r\n    const targetUri = await workspaceState.getDetailsPath(targetPath, token);\r\n    if (targetUri === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    link.target = targetUri;\r\n    console.log(\"resolveDocumentLink: %s\", targetUri.toString());\r\n    return link;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["vscode", "vscode", "state", "vscode", "state", "vscode", "vscode", "vscode", "vscode", "state"]
}
